networks:
  myapp:
    name: "myapp"
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.5.0.0/16
          ip_range: 10.5.0.0/24
          gateway: 10.5.0.1
          aux_addresses:
            kafka: 10.5.0.2
            zookeeper: 10.5.0.3
services:
  # <-- POSTGRES -->
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: ufkunl
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - "myapp"
    restart: always
  # <-- Notification -->
  notification:
    container_name: notification-service
    build: ./notification-service
    image: notification-image
    ports:
      - 8083:8083
    expose:
      - 8083
    links:
      - postgres
      - kafka
    networks:
      - "myapp"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/notification
      - SPRING_DATASOURCE_USERNAME=ufkunl
      - SPRING_DATASOURCE_PASSWORD=123456
      - KAFKA_ADDRESS=http://kafka:9092
  # <-- FRAUD -->
  fraud:
    container_name: fraud-service
    build: ./fraud-service
    image: fraud-image
    ports:
      - 8082:8082
    expose:
      - 8082
    networks:
      - "myapp"
    links:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/fraud
      - SPRING_DATASOURCE_USERNAME=ufkunl
      - SPRING_DATASOURCE_PASSWORD=123456
  # <-- CUSTOMER -->
  customer:
    container_name: customer-service
    build: ./customer-service
    image: customer-image
    ports:
      - 8081:8081
    expose:
      - 8081
    networks:
      - "myapp"
    links:
      - postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/customer
      - SPRING_DATASOURCE_USERNAME=ufkunl
      - SPRING_DATASOURCE_PASSWORD=123456
      - KAFKA_ADDRESS=http://kafka:9092
  # <-- Eureka -->
  eureka:
    container_name: eureka-service
    build: ./eureka-server
    image: eureka-service
    networks:
      - "myapp"
    ports:
      - 8761:8761
    expose:
      - 8761
    restart: always
  # <-- Api Gateway -->
  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    image: api-gateway-image
    ports:
      - 8080:8080
    expose:
      - 8080
    networks:
      - "myapp"
    restart: always
  # <-- KAFKA -->
  zookeeper:
    image: "bitnami/zookeeper:latest"
    container_name: "myapp-zookeeper"
    networks:
      - "myapp"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:2.5.0
    container_name: "myapp-kafka"
    networks:
      - "myapp"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://10.5.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

volumes:
  postgres:
  pgadmin: